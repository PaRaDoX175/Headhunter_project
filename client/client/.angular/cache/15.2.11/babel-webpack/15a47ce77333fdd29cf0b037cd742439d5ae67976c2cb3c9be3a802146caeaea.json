{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/account.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\nconst _c0 = [\"loginForm\"];\nfunction LoginComponent_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6);\n    i0.ɵɵtext(1, \" \\u041F\\u043E\\u0436\\u0430\\u043B\\u0443\\u0439\\u0441\\u0442\\u0430 \\u0443\\u043A\\u0430\\u0436\\u0438\\u0442\\u0435 email \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6);\n    i0.ɵɵtext(1, \" \\u041D\\u0435\\u0432\\u0435\\u0440\\u043D\\u044B\\u0439 email \\u0430\\u0434\\u0440\\u0435\\u0441 \");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction LoginComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 6);\n    i0.ɵɵtext(1, \" \\u041F\\u043E\\u0436\\u0430\\u043B\\u0443\\u0439\\u0441\\u0442\\u0430 \\u0443\\u043A\\u0430\\u0436\\u0438\\u0442\\u0435 \\u043F\\u0430\\u0440\\u043E\\u043B\\u044C \");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class LoginComponent {\n  constructor(accountService, router) {\n    this.accountService = accountService;\n    this.router = router;\n    this.logInForm = new FormGroup({\n      email: new FormControl('', [Validators.required, Validators.email]),\n      password: new FormControl('', Validators.required)\n    });\n  }\n  login() {\n    this.accountService.login(this.loginForm.value).subscribe({\n      next: data => {\n        localStorage.setItem('TOKEN', data.token);\n        localStorage.setItem('DisplayName', data.displayName);\n        this.router.navigate(['']).then(() => {\n          window.location.reload();\n        });\n      }\n    });\n  }\n  onSubmit() {\n    this.accountService.login(this.logInForm.value).subscribe({\n      next: data => {\n        localStorage.setItem('TOKEN', data.token);\n        localStorage.setItem('DisplayName', data.displayName);\n        this.router.navigate(['']).then(() => {\n          window.location.reload();\n        });\n      }\n    });\n  }\n  static #_ = this.ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.AccountService), i0.ɵɵdirectiveInject(i2.Router));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"app-login\"]],\n    viewQuery: function LoginComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.loginForm = _t.first);\n      }\n    },\n    decls: 9,\n    vars: 9,\n    consts: [[1, \"mil-container\"], [2, \"display\", \"flex\", \"flex-direction\", \"column\", 3, \"formGroup\", \"submit\"], [\"type\", \"text\", \"formControlName\", \"email\", \"id\", \"email\", \"placeholder\", \"email\", \"required\", \"\"], [\"style\", \"color: red\", 4, \"ngIf\"], [\"type\", \"text\", \"formControlName\", \"password\", \"id\", \"password\", \"placeholder\", \"password\", \"required\", \"\"], [\"type\", \"submit\", 3, \"disabled\"], [2, \"color\", \"red\"]],\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1);\n        i0.ɵɵlistener(\"submit\", function LoginComponent_Template_form_submit_1_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelement(2, \"input\", 2);\n        i0.ɵɵtemplate(3, LoginComponent_div_3_Template, 2, 0, \"div\", 3);\n        i0.ɵɵtemplate(4, LoginComponent_div_4_Template, 2, 0, \"div\", 3);\n        i0.ɵɵelement(5, \"input\", 4);\n        i0.ɵɵtemplate(6, LoginComponent_div_6_Template, 2, 0, \"div\", 3);\n        i0.ɵɵelementStart(7, \"button\", 5);\n        i0.ɵɵtext(8, \"\\u0412\\u043E\\u0439\\u0442\\u0438\");\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        let tmp_1_0;\n        let tmp_2_0;\n        let tmp_3_0;\n        let tmp_4_0;\n        let tmp_5_0;\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.logInForm);\n        i0.ɵɵadvance(1);\n        i0.ɵɵclassProp(\"is-invalid\", ((tmp_1_0 = ctx.logInForm.get(\"email\")) == null ? null : tmp_1_0.touched) && ((tmp_1_0 = ctx.logInForm.get(\"email\")) == null ? null : tmp_1_0.invalid));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ((tmp_2_0 = ctx.logInForm.get(\"email\")) == null ? null : tmp_2_0.errors == null ? null : tmp_2_0.errors[\"required\"]) && ((tmp_2_0 = ctx.logInForm.get(\"email\")) == null ? null : tmp_2_0.touched));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", (tmp_3_0 = ctx.logInForm.get(\"email\")) == null ? null : tmp_3_0.errors == null ? null : tmp_3_0.errors[\"email\"]);\n        i0.ɵɵadvance(1);\n        i0.ɵɵclassProp(\"is-invalid\", ((tmp_4_0 = ctx.logInForm.get(\"password\")) == null ? null : tmp_4_0.touched) && ((tmp_4_0 = ctx.logInForm.get(\"password\")) == null ? null : tmp_4_0.invalid));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ((tmp_5_0 = ctx.logInForm.get(\"password\")) == null ? null : tmp_5_0.errors == null ? null : tmp_5_0.errors[\"required\"]) && ((tmp_5_0 = ctx.logInForm.get(\"password\")) == null ? null : tmp_5_0.touched));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"disabled\", ctx.logInForm.invalid);\n      }\n    },\n    dependencies: [i3.NgIf, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.RequiredValidator, i4.FormGroupDirective, i4.FormControlName],\n    styles: [\".mil-container[_ngcontent-%COMP%] {\\n  padding-top: 100px;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n}\\n\\n.is-invalid[_ngcontent-%COMP%] {\\n  border: 1px solid red;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbG9naW4vbG9naW4uY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxrQkFBQTtFQUNBLGFBQUE7RUFDQSx1QkFBQTtFQUNBLG1CQUFBO0FBQ0o7O0FBRUE7RUFDSSxxQkFBQTtBQUNKIiwic291cmNlc0NvbnRlbnQiOlsiLm1pbC1jb250YWluZXIge1xyXG4gICAgcGFkZGluZy10b3A6IDEwMHB4O1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcclxufVxyXG5cclxuLmlzLWludmFsaWQge1xyXG4gICAgYm9yZGVyOiAxcHggc29saWQgcmVkXHJcbn0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n  });\n}","map":{"version":3,"mappings":"AAEA,SAASA,WAAW,EAAEC,SAAS,EAAUC,UAAU,QAAQ,gBAAgB;;;;;;;;;ICcvEC,8BAGC;IACCA,+HACF;IAAAA,iBAAM;;;;;IACNA,8BAA0E;IACxEA,uGACF;IAAAA,iBAAM;;;;;IAWNA,8BAGC;IACCA,8JACF;IAAAA,iBAAM;;;AD9BV,OAAM,MAAOC,cAAc;EAGzBC,YAAoBC,cAA8B,EAAUC,MAAc;IAAtD,mBAAc,GAAdD,cAAc;IAA0B,WAAM,GAANC,MAAM;IAclE,cAAS,GAAc,IAAIN,SAAS,CAAC;MACnCO,KAAK,EAAE,IAAIR,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAACO,QAAQ,EAAEP,UAAU,CAACM,KAAK,CAAC,CAAC;MACnEE,QAAQ,EAAE,IAAIV,WAAW,CAAC,EAAE,EAAEE,UAAU,CAACO,QAAQ;KAClD,CAAC;EAjB2E;EAE7EE,KAAK;IACH,IAAI,CAACL,cAAc,CAACK,KAAK,CAAC,IAAI,CAACC,SAAS,CAACC,KAAK,CAAC,CAACC,SAAS,CAAC;MACxDC,IAAI,EAAGC,IAAI,IAAI;QACbC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,IAAI,CAACG,KAAK,CAAC;QACzCF,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEF,IAAI,CAACI,WAAW,CAAC;QACrD,IAAI,CAACb,MAAM,CAACc,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAACC,IAAI,CAAC,MAAK;UACnCC,MAAM,CAACC,QAAQ,CAACC,MAAM,EAAE;QAC1B,CAAC,CAAC;MACJ;KACD,CAAC;EACJ;EAOAC,QAAQ;IACN,IAAI,CAACpB,cAAc,CAACK,KAAK,CAAC,IAAI,CAACgB,SAAS,CAACd,KAAK,CAAC,CAACC,SAAS,CAAC;MACxDC,IAAI,EAAGC,IAAI,IAAI;QACbC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,IAAI,CAACG,KAAK,CAAC;QACzCF,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEF,IAAI,CAACI,WAAW,CAAC;QACrD,IAAI,CAACb,MAAM,CAACc,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAACC,IAAI,CAAC,MAAK;UACnCC,MAAM,CAACC,QAAQ,CAACC,MAAM,EAAE;QAC1B,CAAC,CAAC;MACJ;KACD,CAAC;EACJ;EAAC;qBAhCUrB,cAAc;EAAA;EAAA;UAAdA,cAAc;IAAAwB;IAAAC;MAAA;;;;;;;;;;;;;QCV3B1B,8BAA2B;QAGvBA;UAAA,OAAU2B,cAAU;QAAA,EAAC;QAGrB3B,2BASE;QACFA,+DAKM;QACNA,+DAEM;QACNA,2BASE;QACFA,+DAKM;QACNA,iCAAqD;QAAAA,8CAAK;QAAAA,iBAAS;;;;;;;;QArCnEA,eAAuB;QAAvBA,yCAAuB;QAGrBA,eAEC;QAFDA,oLAEC;QAQAA,eAAqF;QAArFA,wNAAqF;QAKlFA,eAA+C;QAA/CA,sIAA+C;QAInDA,eAEC;QAFDA,0LAEC;QAQAA,eAA2F;QAA3FA,8NAA2F;QAKxEA,eAA8B;QAA9BA,gDAA8B","names":["FormControl","FormGroup","Validators","i0","LoginComponent","constructor","accountService","router","email","required","password","login","loginForm","value","subscribe","next","data","localStorage","setItem","token","displayName","navigate","then","window","location","reload","onSubmit","logInForm","selectors","viewQuery","ctx"],"sourceRoot":"","sources":["C:\\Ruslan\\headhunter\\client\\client\\src\\app\\login\\login.component.ts","C:\\Ruslan\\headhunter\\client\\client\\src\\app\\login\\login.component.html"],"sourcesContent":["import { Component, ViewChild } from '@angular/core';\nimport { AccountService } from '../services/account.service';\nimport { FormControl, FormGroup, NgForm, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent {\n  @ViewChild('loginForm') loginForm!: NgForm;\n\n  constructor(private accountService: AccountService, private router: Router) {}\n\n  login() {\n    this.accountService.login(this.loginForm.value).subscribe({\n      next: (data) => {\n        localStorage.setItem('TOKEN', data.token);\n        localStorage.setItem('DisplayName', data.displayName);\n        this.router.navigate(['']).then(() => {\n          window.location.reload();\n        });\n      },\n    });\n  }\n\n  logInForm: FormGroup = new FormGroup({\n    email: new FormControl('', [Validators.required, Validators.email]),\n    password: new FormControl('', Validators.required),\n  });\n\n  onSubmit() {\n    this.accountService.login(this.logInForm.value).subscribe({\n      next: (data) => {\n        localStorage.setItem('TOKEN', data.token);\n        localStorage.setItem('DisplayName', data.displayName);\n        this.router.navigate(['']).then(() => {\n          window.location.reload();\n        });\n      },\n    });\n  }\n}\n","<div class=\"mil-container\">\n  <form\n    style=\"display: flex; flex-direction: column\"\n    (submit)=\"onSubmit()\"\n    [formGroup]=\"logInForm\"\n  >\n    <input\n      [class.is-invalid]=\"\n        logInForm.get('email')?.touched && logInForm.get('email')?.invalid\n      \"\n      type=\"text\"\n      formControlName=\"email\"\n      id=\"email\"\n      placeholder=\"email\"\n      required\n    />\n    <div\n      *ngIf=\"logInForm.get('email')?.errors?.['required'] && logInForm.get('email')?.touched\"\n      style=\"color: red\"\n    >\n      Пожалуйста укажите email\n    </div>\n    <div *ngIf=\"logInForm.get('email')?.errors?.['email']\" style=\"color: red\">\n      Неверный email адрес\n    </div>\n    <input\n      [class.is-invalid]=\"\n        logInForm.get('password')?.touched && logInForm.get('password')?.invalid\n      \"\n      type=\"text\"\n      formControlName=\"password\"\n      id=\"password\"\n      placeholder=\"password\"\n      required\n    />\n    <div\n      *ngIf=\"logInForm.get('password')?.errors?.['required'] && logInForm.get('password')?.touched\"\n      style=\"color: red\"\n    >\n      Пожалуйста укажите пароль\n    </div>\n    <button type=\"submit\" [disabled]=\"logInForm.invalid\">Войти</button>\n  </form>\n  <!-- <div class=\"col-4 ms-5\">\n    <p>Form status: {{ logInForm.status }}</p>\n    <p>Email status: {{ logInForm.get(\"password\")?.status }}</p>\n    <p>Email touched: {{ logInForm.get(\"password\")?.touched }}</p>\n    <p>Email dirty: {{ logInForm.get(\"password\")?.dirty }}</p>\n  </div> -->\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}