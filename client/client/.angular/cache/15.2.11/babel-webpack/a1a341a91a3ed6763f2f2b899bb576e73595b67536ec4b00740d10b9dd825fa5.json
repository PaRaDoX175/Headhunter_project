{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AccountService {\n  constructor(http) {\n    this.http = http;\n  }\n  isTokenExpired() {\n    const token = localStorage.getItem('TOKEN');\n    let headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    let isExpired;\n    this.http.get('http://localhost:5045/api/account/istokenexpired', {\n      headers\n    }).subscribe({\n      next: res => {\n        isExpired = res;\n        console.log(`bebra: ${isExpired}`);\n      }\n    });\n    return isExpired;\n  }\n  getResume() {\n    const token = localStorage.getItem('TOKEN');\n    let headers = new HttpHeaders();\n    headers = headers.set('Authorization', `Bearer ${token}`);\n    return this.http.get('http://localhost:5045/api/account/getresume', {\n      headers\n    });\n  }\n  getLoginInfo(token) {\n    if (token === null) {\n      return null;\n    }\n    let headers = new HttpHeaders();\n    headers = headers.set('Authorization', `Bearer ${token}`);\n    return this.http.get('http://localhost:5045/api/account/autologin', {\n      headers\n    });\n  }\n  updateResume(token, resume) {\n    if (token === null) {\n      return null;\n    }\n    let headers = new HttpHeaders();\n    headers = headers.set('Authorization', `Bearer ${token}`);\n    return this.http.put('http://localhost:5045/api/account/updateresume', resume, {\n      headers\n    });\n  }\n  login(loginDto) {\n    return this.http.post('http://localhost:5045/api/account/login', loginDto);\n  }\n  sendResume(token, id, resume) {\n    if (token === null) {\n      return null;\n    }\n    let headers = new HttpHeaders();\n    headers = headers.set('Authorization', `Bearer ${token}`);\n    return this.http.post(`http://localhost:5045/api/account/sendemail?id=${id}`, resume, {\n      headers\n    });\n  }\n  static #_ = this.ɵfac = function AccountService_Factory(t) {\n    return new (t || AccountService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AccountService,\n    factory: AccountService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;;;AAS9D,OAAM,MAAOC,cAAc;EACzBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EAAe;EAEvCC,cAAc;IACZ,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIC,OAAO,GAAG,IAAIR,WAAW,EAAE,CAACS,GAAG,CAAC,eAAe,EAAE,UAAUJ,KAAK,EAAE,CAAC;IACvE,IAAIK,SAAS;IACb,IAAI,CAACP,IAAI,CACNQ,GAAG,CAAU,kDAAkD,EAAE;MAChEH;KACD,CAAC,CACDI,SAAS,CAAC;MACTC,IAAI,EAAGC,GAAG,IAAI;QACZJ,SAAS,GAAGI,GAAG;QACfC,OAAO,CAACC,GAAG,CAAC,UAAUN,SAAS,EAAE,CAAC;MACpC;KACD,CAAC;IAEJ,OAAOA,SAAS;EAClB;EAEAO,SAAS;IACP,MAAMZ,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAE3C,IAAIC,OAAO,GAAG,IAAIR,WAAW,EAAE;IAC/BQ,OAAO,GAAGA,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,UAAUJ,KAAK,EAAE,CAAC;IAEzD,OAAO,IAAI,CAACF,IAAI,CAACQ,GAAG,CAClB,6CAA6C,EAC7C;MAAEH;IAAO,CAAE,CACZ;EACH;EAEAU,YAAY,CAACb,KAAoB;IAC/B,IAAIA,KAAK,KAAK,IAAI,EAAE;MAClB,OAAO,IAAI;;IAEb,IAAIG,OAAO,GAAG,IAAIR,WAAW,EAAE;IAC/BQ,OAAO,GAAGA,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,UAAUJ,KAAK,EAAE,CAAC;IAEzD,OAAO,IAAI,CAACF,IAAI,CAACQ,GAAG,CAClB,6CAA6C,EAC7C;MACEH;KACD,CACF;EACH;EAEAW,YAAY,CAACd,KAAoB,EAAEe,MAAe;IAChD,IAAIf,KAAK,KAAK,IAAI,EAAE;MAClB,OAAO,IAAI;;IAGb,IAAIG,OAAO,GAAG,IAAIR,WAAW,EAAE;IAC/BQ,OAAO,GAAGA,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,UAAUJ,KAAK,EAAE,CAAC;IAEzD,OAAO,IAAI,CAACF,IAAI,CAACkB,GAAG,CAClB,gDAAgD,EAChDD,MAAM,EACN;MAAEZ;IAAO,CAAE,CACZ;EACH;EAEAc,KAAK,CAACC,QAAmB;IACvB,OAAO,IAAI,CAACpB,IAAI,CAACqB,IAAI,CACnB,yCAAyC,EACzCD,QAAQ,CACT;EACH;EAEAE,UAAU,CAACpB,KAAoB,EAAEqB,EAAU,EAAEN,MAAe;IAC1D,IAAIf,KAAK,KAAK,IAAI,EAAE;MAClB,OAAO,IAAI;;IAGb,IAAIG,OAAO,GAAG,IAAIR,WAAW,EAAE;IAC/BQ,OAAO,GAAGA,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,UAAUJ,KAAK,EAAE,CAAC;IAEzD,OAAO,IAAI,CAACF,IAAI,CAACqB,IAAI,CACnB,kDAAkDE,EAAE,EAAE,EACtDN,MAAM,EACN;MAAEZ;IAAO,CAAE,CACZ;EACH;EAAC;qBAnFUP,cAAc;EAAA;EAAA;WAAdA,cAAc;IAAA0B,SAAd1B,cAAc;IAAA2B,YAFb;EAAM","names":["HttpHeaders","AccountService","constructor","http","isTokenExpired","token","localStorage","getItem","headers","set","isExpired","get","subscribe","next","res","console","log","getResume","getLoginInfo","updateResume","resume","put","login","loginDto","post","sendResume","id","factory","providedIn"],"sourceRoot":"","sources":["C:\\Ruslan\\headhunter\\client\\client\\src\\app\\services\\account.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { IResponse, IResume } from '../interfaces/appUser';\nimport { ILoginDto } from '../interfaces/login';\nimport { IEmailResp } from '../interfaces/emailResp';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AccountService {\n  constructor(private http: HttpClient) {}\n\n  isTokenExpired() {\n    const token = localStorage.getItem('TOKEN');\n    let headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    let isExpired;\n    this.http\n      .get<boolean>('http://localhost:5045/api/account/istokenexpired', {\n        headers,\n      })\n      .subscribe({\n        next: (res) => {\n          isExpired = res;\n          console.log(`bebra: ${isExpired}`);\n        },\n      });\n\n    return isExpired;\n  }\n\n  getResume() {\n    const token = localStorage.getItem('TOKEN');\n\n    let headers = new HttpHeaders();\n    headers = headers.set('Authorization', `Bearer ${token}`);\n\n    return this.http.get<IResume>(\n      'http://localhost:5045/api/account/getresume',\n      { headers }\n    );\n  }\n\n  getLoginInfo(token: string | null) {\n    if (token === null) {\n      return null;\n    }\n    let headers = new HttpHeaders();\n    headers = headers.set('Authorization', `Bearer ${token}`);\n\n    return this.http.get<IResponse>(\n      'http://localhost:5045/api/account/autologin',\n      {\n        headers,\n      }\n    );\n  }\n\n  updateResume(token: string | null, resume: IResume) {\n    if (token === null) {\n      return null;\n    }\n\n    let headers = new HttpHeaders();\n    headers = headers.set('Authorization', `Bearer ${token}`);\n\n    return this.http.put<IResume>(\n      'http://localhost:5045/api/account/updateresume',\n      resume,\n      { headers }\n    );\n  }\n\n  login(loginDto: ILoginDto) {\n    return this.http.post<IResponse>(\n      'http://localhost:5045/api/account/login',\n      loginDto\n    );\n  }\n\n  sendResume(token: string | null, id: number, resume: IResume) {\n    if (token === null) {\n      return null;\n    }\n\n    let headers = new HttpHeaders();\n    headers = headers.set('Authorization', `Bearer ${token}`);\n\n    return this.http.post<IEmailResp>(\n      `http://localhost:5045/api/account/sendemail?id=${id}`,\n      resume,\n      { headers }\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}