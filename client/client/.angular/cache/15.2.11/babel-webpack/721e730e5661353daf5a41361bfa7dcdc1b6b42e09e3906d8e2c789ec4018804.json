{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.add5L = exports.add5H = exports.add4H = exports.add4L = exports.add3H = exports.add3L = exports.rotlBL = exports.rotlBH = exports.rotlSL = exports.rotlSH = exports.rotr32L = exports.rotr32H = exports.rotrBL = exports.rotrBH = exports.rotrSL = exports.rotrSH = exports.shrSL = exports.shrSH = exports.toBig = void 0;\nexports.fromBig = fromBig;\nexports.split = split;\nexports.add = add;\nconst U32_MASK64 = /* @__PURE__ */BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */BigInt(32);\n// BigUint64Array is too slow as per 2024, so we implement it using Uint32Array.\n// TODO: re-check https://issues.chromium.org/issues/42212588\nfunction fromBig(n, le = false) {\n  if (le) return {\n    h: Number(n & U32_MASK64),\n    l: Number(n >> _32n & U32_MASK64)\n  };\n  return {\n    h: Number(n >> _32n & U32_MASK64) | 0,\n    l: Number(n & U32_MASK64) | 0\n  };\n}\nfunction split(lst, le = false) {\n  let Ah = new Uint32Array(lst.length);\n  let Al = new Uint32Array(lst.length);\n  for (let i = 0; i < lst.length; i++) {\n    const {\n      h,\n      l\n    } = fromBig(lst[i], le);\n    [Ah[i], Al[i]] = [h, l];\n  }\n  return [Ah, Al];\n}\nconst toBig = (h, l) => BigInt(h >>> 0) << _32n | BigInt(l >>> 0);\nexports.toBig = toBig;\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nexports.shrSH = shrSH;\nconst shrSL = (h, l, s) => h << 32 - s | l >>> s;\nexports.shrSL = shrSL;\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => h >>> s | l << 32 - s;\nexports.rotrSH = rotrSH;\nconst rotrSL = (h, l, s) => h << 32 - s | l >>> s;\nexports.rotrSL = rotrSL;\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => h << 64 - s | l >>> s - 32;\nexports.rotrBH = rotrBH;\nconst rotrBL = (h, l, s) => h >>> s - 32 | l << 64 - s;\nexports.rotrBL = rotrBL;\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nexports.rotr32H = rotr32H;\nconst rotr32L = (h, _l) => h;\nexports.rotr32L = rotr32L;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => h << s | l >>> 32 - s;\nexports.rotlSH = rotlSH;\nconst rotlSL = (h, l, s) => l << s | h >>> 32 - s;\nexports.rotlSL = rotlSL;\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => l << s - 32 | h >>> 64 - s;\nexports.rotlBH = rotlBH;\nconst rotlBL = (h, l, s) => h << s - 32 | l >>> 64 - s;\nexports.rotlBL = rotlBL;\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n  const l = (Al >>> 0) + (Bl >>> 0);\n  return {\n    h: Ah + Bh + (l / 2 ** 32 | 0) | 0,\n    l: l | 0\n  };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nexports.add3L = add3L;\nconst add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;\nexports.add3H = add3H;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nexports.add4L = add4L;\nconst add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;\nexports.add4H = add4H;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nexports.add5L = add5L;\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;\nexports.add5H = add5H;\n// prettier-ignore\nconst u64 = {\n  fromBig,\n  split,\n  toBig,\n  shrSH,\n  shrSL,\n  rotrSH,\n  rotrSL,\n  rotrBH,\n  rotrBL,\n  rotr32H,\n  rotr32L,\n  rotlSH,\n  rotlSL,\n  rotlBH,\n  rotlBL,\n  add,\n  add3L,\n  add3H,\n  add4L,\n  add4H,\n  add5H,\n  add5L\n};\nexports.default = u64;","map":{"version":3,"names":["Object","defineProperty","exports","value","add5L","add5H","add4H","add4L","add3H","add3L","rotlBL","rotlBH","rotlSL","rotlSH","rotr32L","rotr32H","rotrBL","rotrBH","rotrSL","rotrSH","shrSL","shrSH","toBig","fromBig","split","add","U32_MASK64","BigInt","_32n","n","le","h","Number","l","lst","Ah","Uint32Array","length","Al","i","_l","s","_h","Bh","Bl","Cl","low","Ch","Dl","Dh","El","Eh","u64","default"],"sources":["C:/Ruslan/headhunter/client/client/node_modules/@noble/hashes/_u64.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.add5L = exports.add5H = exports.add4H = exports.add4L = exports.add3H = exports.add3L = exports.rotlBL = exports.rotlBH = exports.rotlSL = exports.rotlSH = exports.rotr32L = exports.rotr32H = exports.rotrBL = exports.rotrBH = exports.rotrSL = exports.rotrSH = exports.shrSL = exports.shrSH = exports.toBig = void 0;\nexports.fromBig = fromBig;\nexports.split = split;\nexports.add = add;\nconst U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\n// BigUint64Array is too slow as per 2024, so we implement it using Uint32Array.\n// TODO: re-check https://issues.chromium.org/issues/42212588\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nfunction split(lst, le = false) {\n    let Ah = new Uint32Array(lst.length);\n    let Al = new Uint32Array(lst.length);\n    for (let i = 0; i < lst.length; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\nexports.toBig = toBig;\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nexports.shrSH = shrSH;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\nexports.shrSL = shrSL;\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nexports.rotrSH = rotrSH;\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\nexports.rotrSL = rotrSL;\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nexports.rotrBH = rotrBH;\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\nexports.rotrBL = rotrBL;\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nexports.rotr32H = rotr32H;\nconst rotr32L = (h, _l) => h;\nexports.rotr32L = rotr32L;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nexports.rotlSH = rotlSH;\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\nexports.rotlSL = rotlSL;\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nexports.rotlBH = rotlBH;\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\nexports.rotlBL = rotlBL;\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nexports.add3L = add3L;\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nexports.add3H = add3H;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nexports.add4L = add4L;\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nexports.add4H = add4H;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nexports.add5L = add5L;\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\nexports.add5H = add5H;\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexports.default = u64;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}