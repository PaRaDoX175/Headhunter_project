{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/account.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/common\";\nconst _c0 = [\"loginForm\"];\nexport class LoginComponent {\n  constructor(accountService, router) {\n    this.accountService = accountService;\n    this.router = router;\n    this.logInForm = new FormGroup({\n      email: new FormControl('', [Validators.required, Validators.email]),\n      password: new FormControl('', Validators.required)\n    });\n  }\n  login() {\n    this.accountService.login(this.loginForm.value).subscribe({\n      next: data => {\n        localStorage.setItem('TOKEN', data.token);\n        localStorage.setItem('DisplayName', data.displayName);\n        this.router.navigate(['']).then(() => {\n          window.location.reload();\n        });\n      }\n    });\n  }\n  onSubmit() {\n    this.accountService.login(this.logInForm.value).subscribe({\n      next: data => {\n        localStorage.setItem('TOKEN', data.token);\n        localStorage.setItem('DisplayName', data.displayName);\n        this.router.navigate(['']).then(() => {\n          window.location.reload();\n        });\n      }\n    });\n  }\n  static #_ = this.ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.AccountService), i0.ɵɵdirectiveInject(i2.Router));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"app-login\"]],\n    viewQuery: function LoginComponent_Query(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵviewQuery(_c0, 5);\n      }\n      if (rf & 2) {\n        let _t;\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.loginForm = _t.first);\n      }\n    },\n    decls: 18,\n    vars: 8,\n    consts: [[1, \"mil-container\"], [2, \"display\", \"flex\", \"flex-direction\", \"column\", 3, \"formGroup\", \"submit\"], [\"type\", \"text\", \"formControlName\", \"email\", \"id\", \"email\", \"placeholder\", \"email\", \"required\", \"\"], [\"type\", \"text\", \"formControlName\", \"password\", \"id\", \"password\", \"placeholder\", \"password\", \"required\", \"\"], [\"type\", \"submit\"], [1, \"col-4\", \"ms-5\"]],\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"form\", 1);\n        i0.ɵɵlistener(\"submit\", function LoginComponent_Template_form_submit_1_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelement(2, \"input\", 2)(3, \"input\", 3);\n        i0.ɵɵelementStart(4, \"button\", 4);\n        i0.ɵɵtext(5, \"\\u0412\\u043E\\u0439\\u0442\\u0438\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(6, \"div\", 5)(7, \"p\");\n        i0.ɵɵtext(8);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"p\");\n        i0.ɵɵtext(10);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"p\");\n        i0.ɵɵtext(12);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(13, \"p\");\n        i0.ɵɵtext(14);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"pre\");\n        i0.ɵɵtext(16);\n        i0.ɵɵpipe(17, \"json\");\n        i0.ɵɵelementEnd()()();\n      }\n      if (rf & 2) {\n        let tmp_2_0;\n        let tmp_3_0;\n        let tmp_4_0;\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.logInForm);\n        i0.ɵɵadvance(7);\n        i0.ɵɵtextInterpolate1(\"Form status: \", ctx.logInForm.status, \"\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\"Email status: \", (tmp_2_0 = ctx.logInForm.get(\"email\")) == null ? null : tmp_2_0.status, \"\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\"Email touched: \", (tmp_3_0 = ctx.logInForm.get(\"email\")) == null ? null : tmp_3_0.touched, \"\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate1(\"Email dirty: \", (tmp_4_0 = ctx.logInForm.get(\"email\")) == null ? null : tmp_4_0.dirty, \"\");\n        i0.ɵɵadvance(2);\n        i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(17, 6, ctx.loginForm.value));\n      }\n    },\n    dependencies: [i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.FormGroupDirective, i3.FormControlName, i4.JsonPipe],\n    styles: [\".mil-container[_ngcontent-%COMP%] {\\n  padding-top: 100px;\\n  display: flex;\\n  justify-content: center;\\n  align-items: center;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvbG9naW4vbG9naW4uY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxrQkFBQTtFQUNBLGFBQUE7RUFDQSx1QkFBQTtFQUNBLG1CQUFBO0FBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyIubWlsLWNvbnRhaW5lciB7XHJcbiAgICBwYWRkaW5nLXRvcDogMTAwcHg7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XHJcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"AAEA,SAASA,WAAW,EAAEC,SAAS,EAAUC,UAAU,QAAQ,gBAAgB;;;;;;;AAQ3E,OAAM,MAAOC,cAAc;EAGzBC,YAAoBC,cAA8B,EAAUC,MAAc;IAAtD,mBAAc,GAAdD,cAAc;IAA0B,WAAM,GAANC,MAAM;IAclE,cAAS,GAAc,IAAIL,SAAS,CAAC;MACnCM,KAAK,EAAE,IAAIP,WAAW,CAAC,EAAE,EAAE,CAACE,UAAU,CAACM,QAAQ,EAAEN,UAAU,CAACK,KAAK,CAAC,CAAC;MACnEE,QAAQ,EAAE,IAAIT,WAAW,CAAC,EAAE,EAAEE,UAAU,CAACM,QAAQ;KAClD,CAAC;EAjB2E;EAE7EE,KAAK;IACH,IAAI,CAACL,cAAc,CAACK,KAAK,CAAC,IAAI,CAACC,SAAS,CAACC,KAAK,CAAC,CAACC,SAAS,CAAC;MACxDC,IAAI,EAAGC,IAAI,IAAI;QACbC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,IAAI,CAACG,KAAK,CAAC;QACzCF,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEF,IAAI,CAACI,WAAW,CAAC;QACrD,IAAI,CAACb,MAAM,CAACc,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAACC,IAAI,CAAC,MAAK;UACnCC,MAAM,CAACC,QAAQ,CAACC,MAAM,EAAE;QAC1B,CAAC,CAAC;MACJ;KACD,CAAC;EACJ;EAOAC,QAAQ;IACN,IAAI,CAACpB,cAAc,CAACK,KAAK,CAAC,IAAI,CAACgB,SAAS,CAACd,KAAK,CAAC,CAACC,SAAS,CAAC;MACxDC,IAAI,EAAGC,IAAI,IAAI;QACbC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,IAAI,CAACG,KAAK,CAAC;QACzCF,YAAY,CAACC,OAAO,CAAC,aAAa,EAAEF,IAAI,CAACI,WAAW,CAAC;QACrD,IAAI,CAACb,MAAM,CAACc,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC,CAACC,IAAI,CAAC,MAAK;UACnCC,MAAM,CAACC,QAAQ,CAACC,MAAM,EAAE;QAC1B,CAAC,CAAC;MACJ;KACD,CAAC;EACJ;EAAC;qBAhCUrB,cAAc;EAAA;EAAA;UAAdA,cAAc;IAAAwB;IAAAC;MAAA;;;;;;;;;;;;;QCV3BC,8BAA2B;QAGvBA;UAAA,OAAUC,cAAU;QAAA,EAAC;QAGrBD,2BAME;QAQFA,iCAAsB;QAAAA,8CAAK;QAAAA,iBAAS;QAEtCA,8BAAwB;QACnBA,YAAmC;QAAAA,iBAAI;QAC1CA,yBAAG;QAAAA,aAAkD;QAAAA,iBAAI;QACzDA,0BAAG;QAAAA,aAAoD;QAAAA,iBAAI;QAC3DA,0BAAG;QAAAA,aAAgD;QAAAA,iBAAI;QACvDA,4BAAK;QAAAA,aAA4B;;QAAAA,iBAAM;;;;;;QAvBvCA,eAAuB;QAAvBA,yCAAuB;QAmBpBA,eAAmC;QAAnCA,gEAAmC;QACnCA,eAAkD;QAAlDA,mHAAkD;QAClDA,eAAoD;QAApDA,qHAAoD;QACpDA,eAAgD;QAAhDA,iHAAgD;QAC9CA,eAA4B;QAA5BA,gEAA4B","names":["FormControl","FormGroup","Validators","LoginComponent","constructor","accountService","router","email","required","password","login","loginForm","value","subscribe","next","data","localStorage","setItem","token","displayName","navigate","then","window","location","reload","onSubmit","logInForm","selectors","viewQuery","i0","ctx"],"sourceRoot":"","sources":["C:\\Ruslan\\headhunter\\client\\client\\src\\app\\login\\login.component.ts","C:\\Ruslan\\headhunter\\client\\client\\src\\app\\login\\login.component.html"],"sourcesContent":["import { Component, ViewChild } from '@angular/core';\nimport { AccountService } from '../services/account.service';\nimport { FormControl, FormGroup, NgForm, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss'],\n})\nexport class LoginComponent {\n  @ViewChild('loginForm') loginForm!: NgForm;\n\n  constructor(private accountService: AccountService, private router: Router) {}\n\n  login() {\n    this.accountService.login(this.loginForm.value).subscribe({\n      next: (data) => {\n        localStorage.setItem('TOKEN', data.token);\n        localStorage.setItem('DisplayName', data.displayName);\n        this.router.navigate(['']).then(() => {\n          window.location.reload();\n        });\n      },\n    });\n  }\n\n  logInForm: FormGroup = new FormGroup({\n    email: new FormControl('', [Validators.required, Validators.email]),\n    password: new FormControl('', Validators.required),\n  });\n\n  onSubmit() {\n    this.accountService.login(this.logInForm.value).subscribe({\n      next: (data) => {\n        localStorage.setItem('TOKEN', data.token);\n        localStorage.setItem('DisplayName', data.displayName);\n        this.router.navigate(['']).then(() => {\n          window.location.reload();\n        });\n      },\n    });\n  }\n}\n","<div class=\"mil-container\">\n  <form\n    style=\"display: flex; flex-direction: column\"\n    (submit)=\"onSubmit()\"\n    [formGroup]=\"logInForm\"\n  >\n    <input\n      type=\"text\"\n      formControlName=\"email\"\n      id=\"email\"\n      placeholder=\"email\"\n      required\n    />\n    <input\n      type=\"text\"\n      formControlName=\"password\"\n      id=\"password\"\n      placeholder=\"password\"\n      required\n    />\n    <button type=\"submit\">Войти</button>\n  </form>\n  <div class=\"col-4 ms-5\">\n    <p>Form status: {{ logInForm.status }}</p>\n    <p>Email status: {{ logInForm.get(\"email\")?.status }}</p>\n    <p>Email touched: {{ logInForm.get(\"email\")?.touched }}</p>\n    <p>Email dirty: {{ logInForm.get(\"email\")?.dirty }}</p>\n    <pre>{{ loginForm.value | json }}</pre>\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}