{"ast":null,"code":"/* global global, window, module */\nconst {\n  sha3_512: sha3\n} = require(\"@noble/hashes/sha3\");\nconst defaultLength = 24;\nconst bigLength = 32;\nconst createEntropy = (length = 4, random = Math.random) => {\n  let entropy = \"\";\n  while (entropy.length < length) {\n    entropy = entropy + Math.floor(random() * 36).toString(36);\n  }\n  return entropy;\n};\n\n/*\n * Adapted from https://github.com/juanelas/bigint-conversion\n * MIT License Copyright (c) 2018 Juan Hernández Serrano\n */\nfunction bufToBigInt(buf) {\n  let bits = 8n;\n  let value = 0n;\n  for (const i of buf.values()) {\n    const bi = BigInt(i);\n    value = (value << bits) + bi;\n  }\n  return value;\n}\nconst hash = (input = \"\") => {\n  // Drop the first character because it will bias the histogram\n  // to the left.\n  return bufToBigInt(sha3(input)).toString(36).slice(1);\n};\nconst alphabet = Array.from({\n  length: 26\n}, (x, i) => String.fromCharCode(i + 97));\nconst randomLetter = random => alphabet[Math.floor(random() * alphabet.length)];\n\n/*\nThis is a fingerprint of the host environment. It is used to help\nprevent collisions when generating ids in a distributed system.\nIf no global object is available, you can pass in your own, or fall back\non a random string.\n*/\nconst createFingerprint = ({\n  globalObj = typeof global !== \"undefined\" ? global : typeof window !== \"undefined\" ? window : {},\n  random = Math.random\n} = {}) => {\n  const globals = Object.keys(globalObj).toString();\n  const sourceString = globals.length ? globals + createEntropy(bigLength, random) : createEntropy(bigLength, random);\n  return hash(sourceString).substring(0, bigLength);\n};\nconst createCounter = count => () => {\n  return count++;\n};\n\n// ~22k hosts before 50% chance of initial counter collision\n// with a remaining counter range of 9.0e+15 in JavaScript.\nconst initialCountMax = 476782367;\nconst init = ({\n  // Fallback if the user does not pass in a CSPRNG. This should be OK\n  // because we don't rely solely on the random number generator for entropy.\n  // We also use the host fingerprint, current time, and a session counter.\n  random = Math.random,\n  counter = createCounter(Math.floor(random() * initialCountMax)),\n  length = defaultLength,\n  fingerprint = createFingerprint({\n    random\n  })\n} = {}) => {\n  return function cuid2() {\n    const firstLetter = randomLetter(random);\n\n    // If we're lucky, the `.toString(36)` calls may reduce hashing rounds\n    // by shortening the input to the hash function a little.\n    const time = Date.now().toString(36);\n    const count = counter().toString(36);\n\n    // The salt should be long enough to be globally unique across the full\n    // length of the hash. For simplicity, we use the same length as the\n    // intended id output.\n    const salt = createEntropy(length, random);\n    const hashInput = `${time + salt + count + fingerprint}`;\n    return `${firstLetter + hash(hashInput).substring(1, length)}`;\n  };\n};\nconst createId = init();\nconst isCuid = (id, {\n  minLength = 2,\n  maxLength = bigLength\n} = {}) => {\n  const length = id.length;\n  const regex = /^[0-9a-z]+$/;\n  try {\n    if (typeof id === \"string\" && length >= minLength && length <= maxLength && regex.test(id)) return true;\n  } finally {}\n  return false;\n};\nmodule.exports.getConstants = () => ({\n  defaultLength,\n  bigLength\n});\nmodule.exports.init = init;\nmodule.exports.createId = createId;\nmodule.exports.bufToBigInt = bufToBigInt;\nmodule.exports.createCounter = createCounter;\nmodule.exports.createFingerprint = createFingerprint;\nmodule.exports.isCuid = isCuid;","map":{"version":3,"names":["sha3_512","sha3","require","defaultLength","bigLength","createEntropy","length","random","Math","entropy","floor","toString","bufToBigInt","buf","bits","value","i","values","bi","BigInt","hash","input","slice","alphabet","Array","from","x","String","fromCharCode","randomLetter","createFingerprint","globalObj","global","window","globals","Object","keys","sourceString","substring","createCounter","count","initialCountMax","init","counter","fingerprint","cuid2","firstLetter","time","Date","now","salt","hashInput","createId","isCuid","id","minLength","maxLength","regex","test","module","exports","getConstants"],"sources":["C:/Ruslan/headhunter/client/client/node_modules/@paralleldrive/cuid2/src/index.js"],"sourcesContent":["/* global global, window, module */\nconst { sha3_512: sha3 } = require(\"@noble/hashes/sha3\");\n\nconst defaultLength = 24;\nconst bigLength = 32;\n\nconst createEntropy = (length = 4, random = Math.random) => {\n  let entropy = \"\";\n\n  while (entropy.length < length) {\n    entropy = entropy + Math.floor(random() * 36).toString(36);\n  }\n  return entropy;\n};\n\n/*\n * Adapted from https://github.com/juanelas/bigint-conversion\n * MIT License Copyright (c) 2018 Juan Hernández Serrano\n */\nfunction bufToBigInt(buf) {\n  let bits = 8n;\n\n  let value = 0n;\n  for (const i of buf.values()) {\n    const bi = BigInt(i);\n    value = (value << bits) + bi;\n  }\n  return value;\n}\n\nconst hash = (input = \"\") => {\n  // Drop the first character because it will bias the histogram\n  // to the left.\n  return bufToBigInt(sha3(input)).toString(36).slice(1);\n};\n\nconst alphabet = Array.from({ length: 26 }, (x, i) =>\n  String.fromCharCode(i + 97)\n);\n\nconst randomLetter = (random) =>\n  alphabet[Math.floor(random() * alphabet.length)];\n\n/*\nThis is a fingerprint of the host environment. It is used to help\nprevent collisions when generating ids in a distributed system.\nIf no global object is available, you can pass in your own, or fall back\non a random string.\n*/\nconst createFingerprint = ({\n  globalObj = typeof global !== \"undefined\"\n    ? global\n    : typeof window !== \"undefined\"\n    ? window\n    : {},\n  random = Math.random,\n} = {}) => {\n  const globals = Object.keys(globalObj).toString();\n  const sourceString = globals.length\n    ? globals + createEntropy(bigLength, random)\n    : createEntropy(bigLength, random);\n\n  return hash(sourceString).substring(0, bigLength);\n};\n\nconst createCounter = (count) => () => {\n  return count++;\n};\n\n// ~22k hosts before 50% chance of initial counter collision\n// with a remaining counter range of 9.0e+15 in JavaScript.\nconst initialCountMax = 476782367;\n\nconst init = ({\n  // Fallback if the user does not pass in a CSPRNG. This should be OK\n  // because we don't rely solely on the random number generator for entropy.\n  // We also use the host fingerprint, current time, and a session counter.\n  random = Math.random,\n  counter = createCounter(Math.floor(random() * initialCountMax)),\n  length = defaultLength,\n  fingerprint = createFingerprint({ random }),\n} = {}) => {\n  return function cuid2() {\n    const firstLetter = randomLetter(random);\n\n    // If we're lucky, the `.toString(36)` calls may reduce hashing rounds\n    // by shortening the input to the hash function a little.\n    const time = Date.now().toString(36);\n    const count = counter().toString(36);\n\n    // The salt should be long enough to be globally unique across the full\n    // length of the hash. For simplicity, we use the same length as the\n    // intended id output.\n    const salt = createEntropy(length, random);\n    const hashInput = `${time + salt + count + fingerprint}`;\n\n    return `${firstLetter + hash(hashInput).substring(1, length)}`;\n  };\n};\n\nconst createId = init();\n\nconst isCuid = (id, { minLength = 2, maxLength = bigLength } = {}) => {\n  const length = id.length;\n  const regex = /^[0-9a-z]+$/;\n\n  try {\n    if (\n      typeof id === \"string\" &&\n      length >= minLength &&\n      length <= maxLength &&\n      regex.test(id)\n    )\n      return true;\n  } finally {\n  }\n\n  return false;\n};\n\nmodule.exports.getConstants = () => ({ defaultLength, bigLength });\nmodule.exports.init = init;\nmodule.exports.createId = createId;\nmodule.exports.bufToBigInt = bufToBigInt;\nmodule.exports.createCounter = createCounter;\nmodule.exports.createFingerprint = createFingerprint;\nmodule.exports.isCuid = isCuid;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}